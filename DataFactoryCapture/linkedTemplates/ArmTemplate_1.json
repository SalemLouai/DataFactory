{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DataFactoryCapture"
		},
		"AzureStorageSacapextnotiTrigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/f505aa4b-46bf-475e-a8cc-14aed61caf34/resourceGroups/Test-Azure-Event-Hub-Capture/providers/Microsoft.Storage/storageAccounts/devemeasacapextnoti"
		},
		"ExternalNotificationEventHubFileTrigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/f505aa4b-46bf-475e-a8cc-14aed61caf34/resourceGroups/Test-Azure-Event-Hub-Capture/providers/Microsoft.Storage/storageAccounts/capturestorageaccount1"
		},
		"AzureStorageSacaplemonTrigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/f505aa4b-46bf-475e-a8cc-14aed61caf34/resourceGroups/Test-Azure-Event-Hub-Capture/providers/Microsoft.Storage/storageAccounts/devemeasacaplemon"
		},
		"AzureStorageSacapl3teleTrigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/f505aa4b-46bf-475e-a8cc-14aed61caf34/resourceGroups/Test-Azure-Event-Hub-Capture/providers/Microsoft.Storage/storageAccounts/devemeasacapl3tele"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CopyCapturedExternalNotificationEventHubtoSqlServerDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ExternalNotificationEventHubFileDataSet",
								"type": "DatasetReference"
							},
							"name": "ExternalNotificationEventHubFileDatasource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SqlServerDataSet",
								"type": "DatasetReference"
							},
							"name": "InsertDataIntoSqlServcer"
						}
					],
					"transformations": [
						{
							"name": "ParseExternalNotificationObject"
						},
						{
							"name": "ConvertDateTimeAndNotificationType"
						}
					],
					"script": "parameters{\n\tBatchSize as integer (100)\n}\nsource(output(\n\t\tSequenceNumber as long,\n\t\tOffset as string,\n\t\tEnqueuedTimeUtc as string,\n\t\tSystemProperties as string,\n\t\tProperties as string,\n\t\tBody as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tlimit: ($BatchSize),\n\trowUrlColumn: 'FileName',\n\tinferDriftedColumnTypes: true) ~> ExternalNotificationEventHubFileDatasource\nExternalNotificationEventHubFileDatasource parse(ExternalNotification = Body ? (Id as string,\n\t\tVin as string,\n\t\tCommandId as string,\n\t\tNotificationType as string,\n\t\tMessageType as string,\n\t\tTimeStamp as string,\n\t\tUserId as string,\n\t\tData as string),\n\tformat: 'json',\n\tdocumentForm: 'singleDocument') ~> ParseExternalNotificationObject\nParseExternalNotificationObject derive(Id = ExternalNotification.Id,\n\t\tCommandId = ExternalNotification.CommandId,\n\t\tMessageType = ExternalNotification.MessageType,\n\t\tNotificationType = case(ExternalNotification.NotificationType == 'CommandResponse', 1, case(ExternalNotification.NotificationType == 'Notification', 2, case(ExternalNotification.NotificationType == 'Alert', 3, case(ExternalNotification.NotificationType == 'ServiceNotification', 4, case(ExternalNotification.NotificationType == 'ServiceManagement', 5, 0))))),\n\t\tDate = toTimestamp(substring(ExternalNotification.TimeStamp, 1, 10)+substring(ExternalNotification.TimeStamp, 12, 8) , 'yyyy-MM-ddHH:mm:ss'),\n\t\tUserId = ExternalNotification.UserId,\n\t\tData = ExternalNotification.Data,\n\t\tVin = ExternalNotification.Vin) ~> ConvertDateTimeAndNotificationType\nConvertDateTimeAndNotificationType sink(input(\n\t\tVin as string,\n\t\tId as string,\n\t\tCommandId as string,\n\t\tNotificationType as integer,\n\t\tMessageType as string,\n\t\tTimeStamp as timestamp,\n\t\tUserId as string,\n\t\tData as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tVin,\n\t\tId,\n\t\tCommandId,\n\t\tNotificationType,\n\t\tMessageType,\n\t\tUserId,\n\t\tData,\n\t\tTimeStamp = Date\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError') ~> InsertDataIntoSqlServcer"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SacapextnotiDataFlows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureStorageSacapextnotiDataSet",
								"type": "DatasetReference"
							},
							"name": "ExternalNotificationEventHubFileDatasource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SqlServerDataSet",
								"type": "DatasetReference"
							},
							"name": "InsertDataIntoSqlServcer"
						}
					],
					"transformations": [
						{
							"name": "ParseExternalNotificationObject"
						},
						{
							"name": "ConvertDateTimeAndNotificationType"
						}
					],
					"script": "parameters{\n\tBatchSize as integer (100)\n}\nsource(output(\n\t\tSequenceNumber as long,\n\t\tOffset as string,\n\t\tEnqueuedTimeUtc as string,\n\t\tSystemProperties as string,\n\t\tProperties as string,\n\t\tBody as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tlimit: ($BatchSize),\n\trowUrlColumn: 'FileName',\n\tinferDriftedColumnTypes: true) ~> ExternalNotificationEventHubFileDatasource\nExternalNotificationEventHubFileDatasource parse(ExternalNotification = Body ? (Id as string,\n\t\tVin as string,\n\t\tCommandId as string,\n\t\tNotificationType as string,\n\t\tMessageType as string,\n\t\tTimeStamp as string,\n\t\tUserId as string,\n\t\tData as string),\n\tformat: 'json',\n\tdocumentForm: 'singleDocument') ~> ParseExternalNotificationObject\nParseExternalNotificationObject derive(Id = ExternalNotification.Id,\n\t\tCommandId = ExternalNotification.CommandId,\n\t\tMessageType = ExternalNotification.MessageType,\n\t\tNotificationType = case(ExternalNotification.NotificationType == 'CommandResponse', 1, case(ExternalNotification.NotificationType == 'Notification', 2, case(ExternalNotification.NotificationType == 'Alert', 3, case(ExternalNotification.NotificationType == 'ServiceNotification', 4, case(ExternalNotification.NotificationType == 'ServiceManagement', 5, 0))))),\n\t\tDate = toTimestamp(substring(ExternalNotification.TimeStamp, 1, 10)+substring(ExternalNotification.TimeStamp, 12, 8) , 'yyyy-MM-ddHH:mm:ss'),\n\t\tUserId = ExternalNotification.UserId,\n\t\tData = ExternalNotification.Data,\n\t\tVin = ExternalNotification.Vin) ~> ConvertDateTimeAndNotificationType\nConvertDateTimeAndNotificationType sink(input(\n\t\tVin as string,\n\t\tId as string,\n\t\tCommandId as string,\n\t\tNotificationType as integer,\n\t\tMessageType as string,\n\t\tTimeStamp as timestamp,\n\t\tUserId as string,\n\t\tData as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tVin,\n\t\tId,\n\t\tCommandId,\n\t\tNotificationType,\n\t\tMessageType,\n\t\tUserId,\n\t\tData,\n\t\tTimeStamp = Date\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> InsertDataIntoSqlServcer"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SacapsocrenaultDataFlows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureStorageSacapsocrenaultDataSet",
								"type": "DatasetReference"
							},
							"name": "ExternalNotificationEventHubFileDatasource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SqlServerDataSet",
								"type": "DatasetReference"
							},
							"name": "InsertDataIntoSqlServcer"
						}
					],
					"transformations": [
						{
							"name": "ParseExternalNotificationObject"
						},
						{
							"name": "ConvertDateTimeAndNotificationType"
						}
					],
					"script": "parameters{\n\tBatchSize as integer (100)\n}\nsource(output(\n\t\tSequenceNumber as long,\n\t\tOffset as string,\n\t\tEnqueuedTimeUtc as string,\n\t\tSystemProperties as string,\n\t\tProperties as string,\n\t\tBody as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tlimit: ($BatchSize),\n\trowUrlColumn: 'FileName',\n\tinferDriftedColumnTypes: true) ~> ExternalNotificationEventHubFileDatasource\nExternalNotificationEventHubFileDatasource parse(ExternalNotification = Body ? (Id as string,\n\t\tVin as string,\n\t\tCommandId as string,\n\t\tNotificationType as string,\n\t\tMessageType as string,\n\t\tTimeStamp as string,\n\t\tUserId as string,\n\t\tData as string),\n\tformat: 'json',\n\tdocumentForm: 'singleDocument') ~> ParseExternalNotificationObject\nParseExternalNotificationObject derive(Id = ExternalNotification.Id,\n\t\tCommandId = ExternalNotification.CommandId,\n\t\tMessageType = ExternalNotification.MessageType,\n\t\tNotificationType = case(ExternalNotification.NotificationType == 'CommandResponse', 1, case(ExternalNotification.NotificationType == 'Notification', 2, case(ExternalNotification.NotificationType == 'Alert', 3, case(ExternalNotification.NotificationType == 'ServiceNotification', 4, case(ExternalNotification.NotificationType == 'ServiceManagement', 5, 0))))),\n\t\tDate = toTimestamp(substring(ExternalNotification.TimeStamp, 1, 10)+substring(ExternalNotification.TimeStamp, 12, 8) , 'yyyy-MM-ddHH:mm:ss'),\n\t\tUserId = ExternalNotification.UserId,\n\t\tData = ExternalNotification.Data,\n\t\tVin = ExternalNotification.Vin) ~> ConvertDateTimeAndNotificationType\nConvertDateTimeAndNotificationType sink(input(\n\t\tVin as string,\n\t\tId as string,\n\t\tCommandId as string,\n\t\tNotificationType as integer,\n\t\tMessageType as string,\n\t\tTimeStamp as timestamp,\n\t\tUserId as string,\n\t\tData as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tVin,\n\t\tId,\n\t\tCommandId,\n\t\tNotificationType,\n\t\tMessageType,\n\t\tUserId,\n\t\tData,\n\t\tTimeStamp = Date\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> InsertDataIntoSqlServcer"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SacapsocnissanDataFlows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureStorageSacapsocnissanDataSet",
								"type": "DatasetReference"
							},
							"name": "ExternalNotificationEventHubFileDatasource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SqlServerDataSet",
								"type": "DatasetReference"
							},
							"name": "InsertDataIntoSqlServcer"
						}
					],
					"transformations": [
						{
							"name": "ParseExternalNotificationObject"
						},
						{
							"name": "ConvertDateTimeAndNotificationType"
						}
					],
					"script": "parameters{\n\tBatchSize as integer (100)\n}\nsource(output(\n\t\tSequenceNumber as long,\n\t\tOffset as string,\n\t\tEnqueuedTimeUtc as string,\n\t\tSystemProperties as string,\n\t\tProperties as string,\n\t\tBody as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tlimit: ($BatchSize),\n\trowUrlColumn: 'FileName',\n\tinferDriftedColumnTypes: true) ~> ExternalNotificationEventHubFileDatasource\nExternalNotificationEventHubFileDatasource parse(ExternalNotification = Body ? (Id as string,\n\t\tVin as string,\n\t\tCommandId as string,\n\t\tNotificationType as string,\n\t\tMessageType as string,\n\t\tTimeStamp as string,\n\t\tUserId as string,\n\t\tData as string),\n\tformat: 'json',\n\tdocumentForm: 'singleDocument') ~> ParseExternalNotificationObject\nParseExternalNotificationObject derive(Id = ExternalNotification.Id,\n\t\tCommandId = ExternalNotification.CommandId,\n\t\tMessageType = ExternalNotification.MessageType,\n\t\tNotificationType = case(ExternalNotification.NotificationType == 'CommandResponse', 1, case(ExternalNotification.NotificationType == 'Notification', 2, case(ExternalNotification.NotificationType == 'Alert', 3, case(ExternalNotification.NotificationType == 'ServiceNotification', 4, case(ExternalNotification.NotificationType == 'ServiceManagement', 5, 0))))),\n\t\tDate = toTimestamp(substring(ExternalNotification.TimeStamp, 1, 10)+substring(ExternalNotification.TimeStamp, 12, 8) , 'yyyy-MM-ddHH:mm:ss'),\n\t\tUserId = ExternalNotification.UserId,\n\t\tData = ExternalNotification.Data,\n\t\tVin = ExternalNotification.Vin) ~> ConvertDateTimeAndNotificationType\nConvertDateTimeAndNotificationType sink(input(\n\t\tVin as string,\n\t\tId as string,\n\t\tCommandId as string,\n\t\tNotificationType as integer,\n\t\tMessageType as string,\n\t\tTimeStamp as timestamp,\n\t\tUserId as string,\n\t\tData as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tVin,\n\t\tId,\n\t\tCommandId,\n\t\tNotificationType,\n\t\tMessageType,\n\t\tUserId,\n\t\tData,\n\t\tTimeStamp = Date\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> InsertDataIntoSqlServcer"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SacaplemonDataFlows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureStorageSacaplemonDataSet",
								"type": "DatasetReference"
							},
							"name": "ExternalNotificationEventHubFileDatasource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SqlServerDataSet",
								"type": "DatasetReference"
							},
							"name": "InsertDataIntoSqlServcer"
						}
					],
					"transformations": [
						{
							"name": "ParseExternalNotificationObject"
						},
						{
							"name": "ConvertDateTimeAndNotificationType"
						}
					],
					"script": "parameters{\n\tBatchSize as integer (100)\n}\nsource(output(\n\t\tSequenceNumber as long,\n\t\tOffset as string,\n\t\tEnqueuedTimeUtc as string,\n\t\tSystemProperties as string,\n\t\tProperties as string,\n\t\tBody as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tlimit: ($BatchSize),\n\trowUrlColumn: 'FileName',\n\tinferDriftedColumnTypes: true) ~> ExternalNotificationEventHubFileDatasource\nExternalNotificationEventHubFileDatasource parse(ExternalNotification = Body ? (Id as string,\n\t\tVin as string,\n\t\tCommandId as string,\n\t\tNotificationType as string,\n\t\tMessageType as string,\n\t\tTimeStamp as string,\n\t\tUserId as string,\n\t\tData as string),\n\tformat: 'json',\n\tdocumentForm: 'singleDocument') ~> ParseExternalNotificationObject\nParseExternalNotificationObject derive(Id = ExternalNotification.Id,\n\t\tCommandId = ExternalNotification.CommandId,\n\t\tMessageType = ExternalNotification.MessageType,\n\t\tNotificationType = case(ExternalNotification.NotificationType == 'CommandResponse', 1, case(ExternalNotification.NotificationType == 'Notification', 2, case(ExternalNotification.NotificationType == 'Alert', 3, case(ExternalNotification.NotificationType == 'ServiceNotification', 4, case(ExternalNotification.NotificationType == 'ServiceManagement', 5, 0))))),\n\t\tDate = toTimestamp(substring(ExternalNotification.TimeStamp, 1, 10)+substring(ExternalNotification.TimeStamp, 12, 8) , 'yyyy-MM-ddHH:mm:ss'),\n\t\tUserId = ExternalNotification.UserId,\n\t\tData = ExternalNotification.Data,\n\t\tVin = ExternalNotification.Vin) ~> ConvertDateTimeAndNotificationType\nConvertDateTimeAndNotificationType sink(input(\n\t\tVin as string,\n\t\tId as string,\n\t\tCommandId as string,\n\t\tNotificationType as integer,\n\t\tMessageType as string,\n\t\tTimeStamp as timestamp,\n\t\tUserId as string,\n\t\tData as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tVin,\n\t\tId,\n\t\tCommandId,\n\t\tNotificationType,\n\t\tMessageType,\n\t\tUserId,\n\t\tData,\n\t\tTimeStamp = Date\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> InsertDataIntoSqlServcer"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sacapl3teleDataFlows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureStorageSacapl3teleDataSet",
								"type": "DatasetReference"
							},
							"name": "ExternalNotificationEventHubFileDatasource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SqlServerDataSet",
								"type": "DatasetReference"
							},
							"name": "InsertDataIntoSqlServcer"
						}
					],
					"transformations": [
						{
							"name": "ParseExternalNotificationObject"
						},
						{
							"name": "ConvertDateTimeAndNotificationType"
						}
					],
					"script": "parameters{\n\tBatchSize as integer (100)\n}\nsource(output(\n\t\tSequenceNumber as long,\n\t\tOffset as string,\n\t\tEnqueuedTimeUtc as string,\n\t\tSystemProperties as string,\n\t\tProperties as string,\n\t\tBody as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tlimit: ($BatchSize),\n\trowUrlColumn: 'FileName',\n\tinferDriftedColumnTypes: true) ~> ExternalNotificationEventHubFileDatasource\nExternalNotificationEventHubFileDatasource parse(ExternalNotification = Body ? (Id as string,\n\t\tVin as string,\n\t\tCommandId as string,\n\t\tNotificationType as string,\n\t\tMessageType as string,\n\t\tTimeStamp as string,\n\t\tUserId as string,\n\t\tData as string),\n\tformat: 'json',\n\tdocumentForm: 'singleDocument') ~> ParseExternalNotificationObject\nParseExternalNotificationObject derive(Id = ExternalNotification.Id,\n\t\tCommandId = ExternalNotification.CommandId,\n\t\tMessageType = ExternalNotification.MessageType,\n\t\tNotificationType = case(ExternalNotification.NotificationType == 'CommandResponse', 1, case(ExternalNotification.NotificationType == 'Notification', 2, case(ExternalNotification.NotificationType == 'Alert', 3, case(ExternalNotification.NotificationType == 'ServiceNotification', 4, case(ExternalNotification.NotificationType == 'ServiceManagement', 5, 0))))),\n\t\tDate = toTimestamp(substring(ExternalNotification.TimeStamp, 1, 10)+substring(ExternalNotification.TimeStamp, 12, 8) , 'yyyy-MM-ddHH:mm:ss'),\n\t\tUserId = ExternalNotification.UserId,\n\t\tData = ExternalNotification.Data,\n\t\tVin = ExternalNotification.Vin) ~> ConvertDateTimeAndNotificationType\nConvertDateTimeAndNotificationType sink(input(\n\t\tVin as string,\n\t\tId as string,\n\t\tCommandId as string,\n\t\tNotificationType as integer,\n\t\tMessageType as string,\n\t\tTimeStamp as timestamp,\n\t\tUserId as string,\n\t\tData as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tVin,\n\t\tId,\n\t\tCommandId,\n\t\tNotificationType,\n\t\tMessageType,\n\t\tUserId,\n\t\tData,\n\t\tTimeStamp = Date\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> InsertDataIntoSqlServcer"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SacapbdpteleDataFlows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureStorageSacapbdpteleDataSet",
								"type": "DatasetReference"
							},
							"name": "ExternalNotificationEventHubFileDatasource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SqlServerDataSet",
								"type": "DatasetReference"
							},
							"name": "InsertDataIntoSqlServcer"
						}
					],
					"transformations": [
						{
							"name": "ParseExternalNotificationObject"
						},
						{
							"name": "ConvertDateTimeAndNotificationType"
						}
					],
					"script": "parameters{\n\tBatchSize as integer (100)\n}\nsource(output(\n\t\tSequenceNumber as long,\n\t\tOffset as string,\n\t\tEnqueuedTimeUtc as string,\n\t\tSystemProperties as string,\n\t\tProperties as string,\n\t\tBody as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tlimit: ($BatchSize),\n\trowUrlColumn: 'FileName',\n\tinferDriftedColumnTypes: true) ~> ExternalNotificationEventHubFileDatasource\nExternalNotificationEventHubFileDatasource parse(ExternalNotification = Body ? (Id as string,\n\t\tVin as string,\n\t\tCommandId as string,\n\t\tNotificationType as string,\n\t\tMessageType as string,\n\t\tTimeStamp as string,\n\t\tUserId as string,\n\t\tData as string),\n\tformat: 'json',\n\tdocumentForm: 'singleDocument') ~> ParseExternalNotificationObject\nParseExternalNotificationObject derive(Id = ExternalNotification.Id,\n\t\tCommandId = ExternalNotification.CommandId,\n\t\tMessageType = ExternalNotification.MessageType,\n\t\tNotificationType = case(ExternalNotification.NotificationType == 'CommandResponse', 1, case(ExternalNotification.NotificationType == 'Notification', 2, case(ExternalNotification.NotificationType == 'Alert', 3, case(ExternalNotification.NotificationType == 'ServiceNotification', 4, case(ExternalNotification.NotificationType == 'ServiceManagement', 5, 0))))),\n\t\tDate = toTimestamp(substring(ExternalNotification.TimeStamp, 1, 10)+substring(ExternalNotification.TimeStamp, 12, 8) , 'yyyy-MM-ddHH:mm:ss'),\n\t\tUserId = ExternalNotification.UserId,\n\t\tData = ExternalNotification.Data,\n\t\tVin = ExternalNotification.Vin) ~> ConvertDateTimeAndNotificationType\nConvertDateTimeAndNotificationType sink(input(\n\t\tVin as string,\n\t\tId as string,\n\t\tCommandId as string,\n\t\tNotificationType as integer,\n\t\tMessageType as string,\n\t\tTimeStamp as timestamp,\n\t\tUserId as string,\n\t\tData as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tVin,\n\t\tId,\n\t\tCommandId,\n\t\tNotificationType,\n\t\tMessageType,\n\t\tUserId,\n\t\tData,\n\t\tTimeStamp = Date\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> InsertDataIntoSqlServcer"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SacaptwtDataFlows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureStorageSacaptwtDataSet",
								"type": "DatasetReference"
							},
							"name": "ExternalNotificationEventHubFileDatasource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SqlServerDataSet",
								"type": "DatasetReference"
							},
							"name": "InsertDataIntoSqlServcer"
						}
					],
					"transformations": [
						{
							"name": "ParseExternalNotificationObject"
						},
						{
							"name": "ConvertDateTimeAndNotificationType"
						}
					],
					"script": "parameters{\n\tBatchSize as integer (100)\n}\nsource(output(\n\t\tSequenceNumber as long,\n\t\tOffset as string,\n\t\tEnqueuedTimeUtc as string,\n\t\tSystemProperties as string,\n\t\tProperties as string,\n\t\tBody as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tlimit: ($BatchSize),\n\trowUrlColumn: 'FileName',\n\tinferDriftedColumnTypes: true) ~> ExternalNotificationEventHubFileDatasource\nExternalNotificationEventHubFileDatasource parse(ExternalNotification = Body ? (Id as string,\n\t\tVin as string,\n\t\tCommandId as string,\n\t\tNotificationType as string,\n\t\tMessageType as string,\n\t\tTimeStamp as string,\n\t\tUserId as string,\n\t\tData as string),\n\tformat: 'json',\n\tdocumentForm: 'singleDocument') ~> ParseExternalNotificationObject\nParseExternalNotificationObject derive(Id = ExternalNotification.Id,\n\t\tCommandId = ExternalNotification.CommandId,\n\t\tMessageType = ExternalNotification.MessageType,\n\t\tNotificationType = case(ExternalNotification.NotificationType == 'CommandResponse', 1, case(ExternalNotification.NotificationType == 'Notification', 2, case(ExternalNotification.NotificationType == 'Alert', 3, case(ExternalNotification.NotificationType == 'ServiceNotification', 4, case(ExternalNotification.NotificationType == 'ServiceManagement', 5, 0))))),\n\t\tDate = toTimestamp(substring(ExternalNotification.TimeStamp, 1, 10)+substring(ExternalNotification.TimeStamp, 12, 8) , 'yyyy-MM-ddHH:mm:ss'),\n\t\tUserId = ExternalNotification.UserId,\n\t\tData = ExternalNotification.Data,\n\t\tVin = ExternalNotification.Vin) ~> ConvertDateTimeAndNotificationType\nConvertDateTimeAndNotificationType sink(input(\n\t\tVin as string,\n\t\tId as string,\n\t\tCommandId as string,\n\t\tNotificationType as integer,\n\t\tMessageType as string,\n\t\tTimeStamp as timestamp,\n\t\tUserId as string,\n\t\tData as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tVin,\n\t\tId,\n\t\tCommandId,\n\t\tNotificationType,\n\t\tMessageType,\n\t\tUserId,\n\t\tData,\n\t\tTimeStamp = Date\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> InsertDataIntoSqlServcer"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExternalNotificationEventHubFileToSqlqServcePipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckIfCaptureEnabledfeatureFlag",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetFeatureFlag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GetFeatureFlag').output.featureFlags.FF_167731_EventHubExternalNotificationCaptureEnabled, true)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "DeleteFileFromStorageWithoutMigration",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ExternalNotificationEventHubFileDataSet",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExternalNotificationEventHubCopyTheDataFromFileToSql",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "CopyCapturedExternalNotificationEventHubtoSqlServerDataFlow",
											"type": "DataFlowReference",
											"parameters": {
												"BatchSize": {
													"value": "@pipeline().globalParameters.BatchSize",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"ExternalNotificationEventHubFileDatasource": {},
												"InsertDataIntoSqlServcer": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "DeleteFileFromStorageAfterMigration",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "ExternalNotificationEventHubCopyTheDataFromFileToSql",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ExternalNotificationEventHubFileDataSet",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "GetFeatureFlag",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.FeatureFlagUrl",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CopyCapturedExternalNotificationEventHubtoSqlServerDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SacapextnotiPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckIfCaptureEnabledfeatureFlag",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetFeatureFlag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GetFeatureFlag').output.featureFlags.FF_167731_EventHubExternalNotificationCaptureEnabled, true)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "DeleteFileFromStorageWithoutMigration",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AzureStorageSacapextnotiDataSet",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExternalNotificationEventHubCopyTheDataFromFileToSql",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "SacapextnotiDataFlows",
											"type": "DataFlowReference",
											"parameters": {
												"BatchSize": {
													"value": "@pipeline().globalParameters.BatchSize",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"ExternalNotificationEventHubFileDatasource": {},
												"InsertDataIntoSqlServcer": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "DeleteFileFromStorageAfterMigration",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "ExternalNotificationEventHubCopyTheDataFromFileToSql",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AzureStorageSacapextnotiDataSet",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "GetFeatureFlag",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.FeatureFlagUrl",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SacapextnotiDataFlows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SacapsocrenaultPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckIfCaptureEnabledfeatureFlag",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetFeatureFlag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GetFeatureFlag').output.featureFlags.FF_167731_EventHubExternalNotificationCaptureEnabled, true)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "DeleteFileFromStorageWithoutMigration",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AzureStorageSacapsocrenaultDataSet",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExternalNotificationEventHubCopyTheDataFromFileToSql",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "SacapsocrenaultDataFlows",
											"type": "DataFlowReference",
											"parameters": {
												"BatchSize": {
													"value": "@pipeline().globalParameters.BatchSize",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"ExternalNotificationEventHubFileDatasource": {},
												"InsertDataIntoSqlServcer": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "DeleteFileFromStorageAfterMigration",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "ExternalNotificationEventHubCopyTheDataFromFileToSql",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AzureStorageSacapsocrenaultDataSet",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "GetFeatureFlag",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.FeatureFlagUrl",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SacapsocrenaultDataFlows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SacapsocnissanPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckIfCaptureEnabledfeatureFlag",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetFeatureFlag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GetFeatureFlag').output.featureFlags.FF_167731_EventHubExternalNotificationCaptureEnabled, true)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "DeleteFileFromStorageWithoutMigration",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AzureStorageSacapsocnissanDataSet",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExternalNotificationEventHubCopyTheDataFromFileToSql",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "SacapsocnissanDataFlows",
											"type": "DataFlowReference",
											"parameters": {
												"BatchSize": {
													"value": "@pipeline().globalParameters.BatchSize",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"ExternalNotificationEventHubFileDatasource": {},
												"InsertDataIntoSqlServcer": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "DeleteFileFromStorageAfterMigration",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "ExternalNotificationEventHubCopyTheDataFromFileToSql",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AzureStorageSacapsocnissanDataSet",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "GetFeatureFlag",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.FeatureFlagUrl",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SacapsocnissanDataFlows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SacaplemonPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckIfCaptureEnabledfeatureFlag",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetFeatureFlag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GetFeatureFlag').output.featureFlags.FF_167731_EventHubExternalNotificationCaptureEnabled, true)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "DeleteFileFromStorageWithoutMigration",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AzureStorageSacaplemonDataSet",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExternalNotificationEventHubCopyTheDataFromFileToSql",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "SacaplemonDataFlows",
											"type": "DataFlowReference",
											"parameters": {
												"BatchSize": {
													"value": "@pipeline().globalParameters.BatchSize",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"ExternalNotificationEventHubFileDatasource": {},
												"InsertDataIntoSqlServcer": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "DeleteFileFromStorageAfterMigration",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "ExternalNotificationEventHubCopyTheDataFromFileToSql",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AzureStorageSacaplemonDataSet",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "GetFeatureFlag",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.FeatureFlagUrl",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SacaplemonDataFlows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sacapl3telePipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckIfCaptureEnabledfeatureFlag",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetFeatureFlag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GetFeatureFlag').output.featureFlags.FF_167731_EventHubExternalNotificationCaptureEnabled, true)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "DeleteFileFromStorageWithoutMigration",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AzureStorageSacapl3teleDataSet",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExternalNotificationEventHubCopyTheDataFromFileToSql",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Sacapl3teleDataFlows",
											"type": "DataFlowReference",
											"parameters": {
												"BatchSize": {
													"value": "@pipeline().globalParameters.BatchSize",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"ExternalNotificationEventHubFileDatasource": {},
												"InsertDataIntoSqlServcer": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "DeleteFileFromStorageAfterMigration",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "ExternalNotificationEventHubCopyTheDataFromFileToSql",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AzureStorageSacapl3teleDataSet",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "GetFeatureFlag",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.FeatureFlagUrl",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Sacapl3teleDataFlows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SacapbdptelePipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckIfCaptureEnabledfeatureFlag",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetFeatureFlag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GetFeatureFlag').output.featureFlags.FF_167731_EventHubExternalNotificationCaptureEnabled, true)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "DeleteFileFromStorageWithoutMigration",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AzureStorageSacapbdpteleDataSet",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExternalNotificationEventHubCopyTheDataFromFileToSql",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "SacapbdpteleDataFlows",
											"type": "DataFlowReference",
											"parameters": {
												"BatchSize": {
													"value": "@pipeline().globalParameters.BatchSize",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"ExternalNotificationEventHubFileDatasource": {},
												"InsertDataIntoSqlServcer": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "DeleteFileFromStorageAfterMigration",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "ExternalNotificationEventHubCopyTheDataFromFileToSql",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AzureStorageSacapbdpteleDataSet",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "GetFeatureFlag",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.FeatureFlagUrl",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SacapbdpteleDataFlows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SacaptwtPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckIfCaptureEnabledfeatureFlag",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetFeatureFlag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GetFeatureFlag').output.featureFlags.FF_167731_EventHubExternalNotificationCaptureEnabled, true)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "DeleteFileFromStorageWithoutMigration",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AzureStorageSacaptwtDataSet",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ExternalNotificationEventHubCopyTheDataFromFileToSql",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "SacaptwtDataFlows",
											"type": "DataFlowReference",
											"parameters": {
												"BatchSize": {
													"value": "@pipeline().globalParameters.BatchSize",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"ExternalNotificationEventHubFileDatasource": {},
												"InsertDataIntoSqlServcer": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "DeleteFileFromStorageAfterMigration",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "ExternalNotificationEventHubCopyTheDataFromFileToSql",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AzureStorageSacaptwtDataSet",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "GetFeatureFlag",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.FeatureFlagUrl",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SacaptwtDataFlows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureStorageSacapextnotiTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "SacapextnotiPipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/capturecontainer/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('AzureStorageSacapextnotiTrigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SacapextnotiPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExternalNotificationEventHubFileTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "ExternalNotificationEventHubFileToSqlqServcePipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/capturecontainer2/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('ExternalNotificationEventHubFileTrigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ExternalNotificationEventHubFileToSqlqServcePipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureStorageSacaplemonTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "SacaplemonPipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/capturecontainer/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('AzureStorageSacaplemonTrigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SacaplemonPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureStorageSacapl3teleTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Sacapl3telePipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/capturecontainer/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('AzureStorageSacapl3teleTrigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Sacapl3telePipeline')]"
			]
		}
	]
}