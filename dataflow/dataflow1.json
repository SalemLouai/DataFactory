{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Avro1",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Parse1"
				},
				{
					"name": "DerivedColumn1"
				}
			],
			"script": "source(output(\n\t\tSequenceNumber as long,\n\t\tOffset as string,\n\t\tEnqueuedTimeUtc as string,\n\t\tSystemProperties as string,\n\t\tProperties as string,\n\t\tBody as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tlimit: 100,\n\trowUrlColumn: 'FileName',\n\tinferDriftedColumnTypes: true) ~> source1\nsource1 parse(ExteranlNotification = Body ? (Id as string, CommandId as string, NotificationType as string, MessageType as string, TimeStamp as date,  UserId as string, Data as string, Vin as string ) ,\n\tformat: 'json',\n\tdocumentForm: 'documentPerLine') ~> Parse1\nParse1 derive({ExteranlNotification.Vin} = sha2(256, ExteranlNotification.Vin)) ~> DerivedColumn1\nDerivedColumn1 sink(input(\n\t\tHashedVehicleId as string,\n\t\tId as string,\n\t\tCommandId as string,\n\t\tNotificationType as integer,\n\t\tMessageType as string,\n\t\tTimeStamp as timestamp,\n\t\tUserId as string,\n\t\tData as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tHashedVehicleId = ExteranlNotification,\n\t\tId = ExteranlNotification,\n\t\tCommandId = ExteranlNotification,\n\t\tNotificationType = ExteranlNotification,\n\t\tMessageType = ExteranlNotification,\n\t\tTimeStamp = ExteranlNotification,\n\t\tUserId = ExteranlNotification,\n\t\tData = ExteranlNotification\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
		}
	}
}